[build-system]
requires = ["hatchling>=1.20.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "otaclient_iot_logging_server"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "LICENSE.md" }
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "aiohttp>=3.9.2, <3.10.0",
  "awsiot_credentialhelper>=0.6.0, <0.7.0",
  "boto3>=1.34.35, <1.35.0",
  "botocore==1.34.35, <1.35.0",
  "pyopenssl==24.0.0",
  "pydantic==2.7.0",
  "pydantic-settings==2.2.1",
  "pyyaml==6.0.1",
  "typing_extensions>=4.0",
]
dynamic = ["version"]
description = "A logging server that uploads logs sent from otaclient to AWS cloudwatch."

[project.optional-dependencies]
dev = [
  "black==24.1.1",
  "coverage==7.4.1",
  "flake8==6.1.0",
  "isort==5.13.2",
  "pytest==7.4.4",
  "pytest-asyncio==0.23.4",
  "pytest-env==1.1.3",
  "pytest-mock==3.12.0",
]

[project.scripts]
iot_logging_server = "otaclient_iot_logging_server.__main__:main"

[project.urls]
Homepage = "https://github.com/tier4/otaclient-iot-logging-server"
Source = "https://github.com/tier4/otaclient-iot-logging-server"

[tool.black]
line-length = 88

[tool.coverage.run]
branch = true
source = ["otaclient_iot_logging_server"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_empty = true

[tool.hatch.envs.dev]
type = "virtual"
features = ["dev"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/otaclient_iot_logging_server/_version.py"

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.isort]
atomic = true
profile = "black"
line_length = 88
lines_before_imports = 2
skip_gitignore = true
known_first_party = ["otaclient_iot_logging_server"]

[tool.pytest.ini_options]
env = [
  "AWS_PROFILE_INFO=tests/data/aws_profile_info.yaml",
  "GREENGRASS_V1_CONFIG=tests/data/gg_v1_cfg.json",
  "GREENGRASS_V2_CONFIG=tests/data/gg_v2_cfg.yaml",
]
asyncio_mode = "auto"
log_auto_indent = true
log_format = "%(asctime)s %(levelname)s %(filename)s %(funcName)s,%(lineno)d %(message)s"
log_cli = true
log_cli_level = "INFO"
pythonpath = ["src"]
testpaths = ["tests"]
