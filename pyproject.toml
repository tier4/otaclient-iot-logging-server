[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling>=1.20",
]

[project]
name = "otaclient-iot-logging-server"
description = "A logging server that uploads logs sent from otaclient to AWS cloudwatch."
readme = "README.md"
license = { text = "LICENSE.md" }
requires-python = ">=3.8"
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "version",
]
dependencies = [
  "aiohttp==3.10.11",
  "awsiot-credentialhelper>=0.6,<0.7",
  "boto3>=1.34.35,<1.35",
  "botocore==1.34.35,<1.35",
  "grpcio==1.70",
  "protobuf>=4.21.12,<5.29",
  "pydantic>=2.6,<3",
  "pydantic-settings>=2.2.1,<3",
  "pyyaml>=6.0.1,<7",
  "typing-extensions>=4",
]
optional-dependencies.dev = [
  "black==24.1.1",
  "coverage==7.4.1",
  "flake8==6.1",
  "hatch",
  "isort==5.13.2",
  "pytest==7.4.4",
  "pytest-asyncio==1",
  "pytest-env==1.1.3",
  "pytest-mock==3.12",
]
urls.Homepage = "https://github.com/tier4/otaclient-iot-logging-server"
urls.Source = "https://github.com/tier4/otaclient-iot-logging-server"
scripts.iot_logging_server = "otaclient_iot_logging_server.__main__:main"

[tool.hatch.envs.dev]
type = "virtual"
features = [
  "dev",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/otaclient_iot_logging_server/_version.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/docs",
]

[tool.hatch.build.targets.wheel]
only-include = [
  "src",
]
sources = [
  "src",
]

[tool.black]
line-length = 88
target-version = [
  'py311',
]
extend-exclude = '''(
  ^.*(_pb2.pyi?|_pb2_grpc.pyi?)$
)'''

[tool.ruff]
target-version = "py311"
# NOTE: not include tests and tools for now
include = [
  "pyproject.toml",
  "src/**/*.py",
  "tests/**/*.py",
]
extend-exclude = [
  "*_pb2.py*",
  "*_pb2_grpc.py*",
]

lint.select = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "E4",
  "E7",
  "E9",
  "F",   # pyflakes
  "I",   # isort
  "ICN", # flake8-import-conventions
  "Q",   # flake8-quotes
]
lint.ignore = [
  "E203", # (white space before ':'): this error conflicts with black linting
  "E266", # (too many leading '#'): sometimes we use multiple # for separting sections
  "E701", # (multiple statements on one line)
  "S101", # (use of assert): mostly we use assert for typing
]

[tool.pytest.ini_options]
env = [
  "AWS_PROFILE_INFO=tests/data/aws_profile_info.yaml",
  "GREENGRASS_V1_CONFIG=tests/data/gg_v1_cfg.json",
  "GREENGRASS_V2_CONFIG=tests/data/gg_v2_cfg.yaml",
]
asyncio_mode = "auto"
log_auto_indent = true
log_format = "%(asctime)s %(levelname)s %(filename)s %(funcName)s,%(lineno)d %(message)s"
log_cli = true
log_cli_level = "INFO"
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]

[tool.coverage.run]
branch = true
source = [
  "otaclient_iot_logging_server",
]
relative_files = true

[tool.coverage.report]
omit = [
  "**/*_pb2.py*",
  "**/*_pb2_grpc.py*",
]
exclude_also = [
  "def __repr__",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_empty = true
